[gd_scene load_steps=8 format=3 uid="uid://bu1rp6qb07wqd"]

[ext_resource type="Environment" uid="uid://b3dksqa4bdkqk" path="res://skybox/stylized_sky/stylized_sky.tres" id="1_uogxm"]
[ext_resource type="Material" uid="uid://cjqcl1kyga14h" path="res://shader/water_low_poly.tres" id="2_hyoby"]
[ext_resource type="Texture2D" uid="uid://bis0njd5xwlyy" path="res://interface/selector.png" id="3_5pmsl"]
[ext_resource type="Resource" uid="uid://dpv43r7vnise1" path="res://structures/grass.tres" id="3_camxx"]

[sub_resource type="PlaneMesh" id="PlaneMesh_87rfl"]
material = ExtResource("2_hyoby")
size = Vector2(1024, 1024)
subdivide_width = 256
subdivide_depth = 256

[sub_resource type="GDScript" id="GDScript_57km2"]
script/source = "
extends Node3D

@onready var gridmap := $GridMap

# 导出变量：结构数组
@export var structures: Array[Structure] = []
# 包含结构预览的节点
@export var selector_container:Node3D
# 用于鼠标射线投射的摄像机
@export var view_camera:Camera3D
# 显示现金的标签
@export var cash_display:Label

# 地图数据
var map:DataMap

# 正在建造的结构索引
var index:int = 0

# 用于鼠标射线投射的平面
var plane:Plane

var border = 128

func _ready():
	# 初始化地图数据
	map = DataMap.new()
	plane = Plane(Vector3.UP, Vector3.ZERO)
	
	# 动态创建新的MeshLibrary，也可以在编辑器中完成
	# 参考：https://docs.godotengine.org/en/stable/tutorials/3d/using_gridmaps.html 
	var mesh_library = MeshLibrary.new()
	
	for structure in structures:
		var id = mesh_library.get_last_unused_item_id()
		
		mesh_library.create_item(id)
		mesh_library.set_item_mesh(id, get_mesh(structure.model))
		mesh_library.set_item_mesh_transform(id, Transform3D())
	
	gridmap.mesh_library = mesh_library
	
	#update_structure()
	#update_cash()
	
	for x in range(-border/2,border/2):
		for z in range(-border/2,border/2):
			gridmap.set_cell_item(Vector3(x,-1,z),0,random_direction())

func _process(delta):
	pass

func random_direction():
	var direction = randi_range(0,3)
	# 0 10 16 22
	if direction == 0:
		direction = 0
	if direction == 1:
		direction = 10
	if direction == 2:
		direction = 16
	if direction == 3:
		direction = 22
	return direction
	
# 从PackedScene中获取网格，用于动态创建MeshLibrary
func get_mesh(packed_scene):
	var scene_state:SceneState = packed_scene.get_state()
	for i in range(scene_state.get_node_count()):
		if(scene_state.get_node_type(i) == \"MeshInstance3D\"):
			for j in scene_state.get_node_property_count(i):
				var prop_name = scene_state.get_node_property_name(i, j)
				if prop_name == \"mesh\":
					var prop_value = scene_state.get_node_property_value(i, j)
					
					return prop_value.duplicate()
	
## 建造（放置）一个结构
#func action_build(gridmap_position):
	#if Input.is_action_just_pressed(\"build\"):
		#
		#var previous_tile = gridmap.get_cell_item(gridmap_position)
		#gridmap.set_cell_item(gridmap_position, index, gridmap.get_orthogonal_index_from_basis(selector.basis))
		#
		#if previous_tile != index:
			#map.cash -= structures[index].price
			#update_cash()
#
## 拆除（移除）一个结构
#func action_demolish(gridmap_position):
	#if Input.is_action_just_pressed(\"demolish\"):
		#gridmap.set_cell_item(gridmap_position, -1)
#
## 旋转 '光标' 90度
#func action_rotate():
	#if Input.is_action_just_pressed(\"rotate\"):
		#selector.rotate_y(deg_to_rad(90))
#
## 切换要建造的结构
#func action_structure_toggle():
	#if Input.is_action_just_pressed(\"structure_next\"):
		#index = wrap(index + 1, 0, structures.size())
	#
	#if Input.is_action_just_pressed(\"structure_previous\"):
		#index = wrap(index - 1, 0, structures.size())
#
	#update_structure()
#
## 更新 '光标' 中的结构视图
#func update_structure():
	## 清除选择器中的上一个结构预览
	#for n in selector_container.get_children():
		#selector_container.remove_child(n)
	#
	## 在选择器中创建新结构预览
	#var _model = structures[index].model.instantiate()
	#selector_container.add_child(_model)
	#_model.position.y += 0.25
	#
#func update_cash():
	#cash_display.text = \"$\" + str(map.cash)

## 保存/加载
#func action_save():
	#if Input.is_action_just_pressed(\"save\"):
		#print(\"Saving map...\")
		#
		#map.structures.clear()
		#for cell in gridmap.get_used_cells():
			#
			#var data_structure:DataStructure = DataStructure.new()
			#
			#data_structure.position = Vector2i(cell.x, cell.z)
			#data_structure.orientation = gridmap.get_cell_item_orientation(cell)
			#data_structure.structure = gridmap.get_cell_item(cell)
			#
			#map.structures.append(data_structure)
			#
		#ResourceSaver.save(map, \"user://map.res\")
	#
#func action_load():
	#if Input.is_action_just_pressed(\"load\"):
		#print(\"Loading map...\")
		#
		#gridmap.clear()
		#
		#map = ResourceLoader.load(\"user://map.res\")
		#if not map:
			#map = DataMap.new()
		#for cell in map.structures:
			#gridmap.set_cell_item(Vector3i(cell.position.x, 0, cell.position.y), cell.structure, cell.orientation)
			#
		#update_cash()
"

[sub_resource type="GDScript" id="GDScript_4hvwq"]
script/source = "
extends Node3D

# RayCast node
@onready var camera := $Camera
@onready var ray_cast := $RayCast

# Signal for collision point
signal collision_point

# Camera movement speed
var movement_speed = 0.3

# 相机视角
var min_view_angle = -90.0 # 最小可视角
var max_view_angle = 90.0 # 最大可视角
var view_sensitivity = 30.0 # 视角灵敏度

# 向量
var movement_vector = Vector3() # 移动向量
var mouse_delta = Vector2() # 鼠标周期
# var mouse_position = Vector2() # 鼠标位置

var collision_point_position

var mouse_locked = true

func _ready():
	pass

func _input(event):
	if mouse_locked == true:
		if event is InputEventMouseMotion:
			mouse_delta = event.relative
			_select_target(event.position)
		if event is InputEventMouseButton or event is InputEventScreenTouch:
			_select_target(event.position)

func _select_target(click_position):
	var origin = camera.project_ray_origin(click_position)
	var end_point = origin + camera.project_ray_normal(click_position) * 100
	var space_state = get_world_3d().direct_space_state
	var params = PhysicsRayQueryParameters3D.new()
	params.from = origin
	params.to = end_point
	params.exclude = []
	params.collision_mask = 1
	ray_cast.force_raycast_update()
	if ray_cast.is_colliding():
		var ray_cast_params = space_state.intersect_ray(params)
		if ray_cast_params:
			var collision_point_position = ray_cast_params['position']
			collision_point_position = Vector3(collision_point_position[0], 0, collision_point_position[2])
			emit_signal('collision_point', collision_point_position)

func _physics_process(delta):
	# var camera_pos = position
	
	if mouse_locked == true:
		var input_vector = Vector3()
		
		# 输入
		if Input.is_action_pressed(\"View\"):
			# 沿x轴旋转相机
			rotation_degrees.x -= mouse_delta.y * view_sensitivity * delta

			# 夹紧相机x旋转轴
			rotation_degrees.x = clamp(rotation_degrees.x, min_view_angle, max_view_angle)

			# 沿 y 轴旋转玩家
			rotation_degrees.y -= mouse_delta.x * view_sensitivity * delta

			# 重置 mouseDelta 向量
			mouse_delta = Vector2()
			
			# 重置 x y z 速度
			movement_vector.x = 0
			movement_vector.y = 0
			movement_vector.z = 0
			
		if Input.is_action_pressed(\"Front\"):
			input_vector.z -= 1
		if Input.is_action_pressed(\"Back\"):
			input_vector.z += 1
		if Input.is_action_pressed(\"Left\"):
			input_vector.x -= 1
		if Input.is_action_pressed(\"Right\"):
			input_vector.x += 1
		if Input.is_action_pressed(\"Up\"):
			input_vector.y += 1
		if Input.is_action_pressed(\"Down\"):
			if position.y >= 2.9: # 地平线限位
				input_vector.y -= 1
		if Input.is_action_pressed('Ctrl'):
			movement_speed = 0.9
		else:
			movement_speed = 0.3
		
		input_vector = input_vector.normalized()
		
		# 获得前进和正确的方向
		var forward = global_transform.basis.z
		var right = global_transform.basis.x
		
		var relative_position = (forward * input_vector.z + right * input_vector.x)
		
		# 设置速度
		movement_vector.x = relative_position.x * movement_speed
		movement_vector.y = input_vector.y * movement_speed
		movement_vector.z = relative_position.z * movement_speed
		
		position.x += movement_vector.x
		position.y += movement_vector.y
		position.z += movement_vector.z
		
	elif mouse_locked == false:
		pass
"

[node name="Main" type="Node3D"]

[node name="Environment" type="Node3D" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="Environment"]
environment = ExtResource("1_uogxm")

[node name="SunLight" type="DirectionalLight3D" parent="Environment"]
transform = Transform3D(1, 0, 0, 0, 0.707107, -0.707107, 0, 0.707107, 0.707107, 0, 0, 0)
light_energy = 0.6
shadow_enabled = true

[node name="MoonLight" type="DirectionalLight3D" parent="Environment"]
transform = Transform3D(1, 0, 0, 0, -0.707107, 0.707107, 0, -0.707107, -0.707107, 0, 0, 0)
light_energy = 0.3
shadow_enabled = true

[node name="Sea" type="MeshInstance3D" parent="Environment"]
mesh = SubResource("PlaneMesh_87rfl")
skeleton = NodePath("../..")

[node name="Bulider" type="Node3D" parent="." node_paths=PackedStringArray("selector_container", "view_camera", "cash_display")]
script = SubResource("GDScript_57km2")
structures = Array[Resource("res://scripts/resource/structure.gd")]([ExtResource("3_camxx")])
selector_container = NodePath("Selector")
view_camera = NodePath("../Viewer/Camera")
cash_display = NodePath("../CanvasLayer/Cash")

[node name="Sprite" type="Sprite3D" parent="Bulider"]
transform = Transform3D(8, 0, 0, 0, -3.49691e-07, -8, 0, 8, -3.49691e-07, 0, 0, 0)
texture_filter = 0
texture = ExtResource("3_5pmsl")

[node name="Selector" type="Node3D" parent="Bulider"]

[node name="GridMap" type="GridMap" parent="Bulider"]
cell_size = Vector3(1, 1, 1)
cell_octant_size = 16

[node name="Viewer" type="Node3D" parent="."]
script = SubResource("GDScript_4hvwq")

[node name="Camera" type="Camera3D" parent="Viewer"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 9, 0)

[node name="RayCast" type="RayCast3D" parent="Viewer"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 9, 0)
collide_with_areas = true

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Cash" type="Label" parent="CanvasLayer"]
offset_left = 65.0
offset_top = 41.0
offset_right = 114.0
offset_bottom = 78.0
text = "123"
